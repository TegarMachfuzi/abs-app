// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider              = "prisma-dbml-generator"
    includeRelationFields = false
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id        String      @id @default(cuid())
    username  String      @unique
    name      String?
    company   String
    address   String?
    password  String
    image     String?
    role      Role
    accounts  Account[]
    sessions  Session[]
    Analytics Analytics[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Analytics {
    id              String            @id @unique @default(cuid())
    userId          String
    User            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdDate     DateTime          @default(now())
    updatedDate     DateTime          @default(now())
    DetailAnalytic  DetailAnalytic[]
    SummaryAnalytic SummaryAnalytic[]
}

model DetailAnalytic {
    id            String    @id @default(cuid())
    analyticId    String
    analytic      Analytics @relation(fields: [analyticId], references: [id], onDelete: Cascade)
    customerId    String
    customerName  String
    purchaseDate  DateTime
    items         String
    totalPurchase Float
    salesType     String?
    createdDate   DateTime  @default(now())
}

model SummaryAnalytic {
    id             String    @id @default(cuid())
    customerId     String
    customerName   String
    recency        Float
    frequency      Float
    monetary       Float
    recencyScore   Float
    frequencyScore Float
    monetaryScore  Float
    rank           Int
    analyticId     String
    createdDate    DateTime  @default(now())
    analytic       Analytics @relation(fields: [analyticId], references: [id], onDelete: Cascade)
}

model SegmentationConfig {
    id           String   @id @unique @default(cuid())
    labelName    String
    description  String?
    minRecency   Int
    minFrequency Int
    minMonetary  Float
    createdDate  DateTime @default(now())
    updatedDate  DateTime @default(now())
}

model SegmentDescription {
    id            String @id @default(cuid())
    segment       String
    activity      String
    actionableTip String
}

enum Role {
    ADMIN
    COMPANY
}
